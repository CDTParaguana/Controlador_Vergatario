==================================================
Documentación de las Funciones en "cdt.h"
==================================================


Declarando Variables
--------------------------------------

const int in0 = 2;
const int in1 = 22;
const int in2 = 23;
const int in3 = 24;
const int in4 = 25;
const int in5 = 26;
const int in6 = 27;
const int in7 = 28;
const int in8 = 29;
const int in9 = 30;
const int in10 = 31;
const int in11 = 32;
const int in12 = 33;
const int in13 = 34;
const int in14 = 35;
const int in15 = 36;
const int in16 = 37;
const int in17 = 38;
const int in18 = 39;
const int in19 = 40;
const int in20 = 41;
const int in21 = 42;
const int i0 = 54;
const int i1 = 55;
const int v0 = 56;
const int v1 = 57;
const int v2 = 58;
const int v3 = 59;
const int in22 = 60;
const int in23 = 61;
const int dip0 = 66;
const int dip1 = 67;
const int dip2 = 68;
const int dip3 = 69;
const int q0 = 3;
const int q1 = 4;
const int q2 = 5;  
const int q3 = 6;
const int q4 = 7;
const int q5 = 8;
const int q6 = 9;
const int q7 = 10;
const int p0 = 11;
const int p1 = 12;
const int r0 = 13;
const int r1 = 43;
const int r2 = 44;
const int r3 = 45;
const int r4 = 46;
const int r5 = 47;
const int r6 = 48;
const int r7 = 49;


Funciones relacionadas con digital I/O
--------------------------------------

e(int pin);
Configura un pin como entrada(Debe seleccionar un pin).

s(int pin);
Configura un pin como salida(Debe seleccionar un pin).

on(int pin);
Enciende un pin digital(Debe seleccionar un pin).

off(int pin);
Apaga un pin digital(Debe seleccionar un pin).

escribir(int pin, bool value);
Parámetros:
 - pin: El número del pin de salida Digital.
 - value: Valor digital (HIGH o LOW) en un pin.

leer(int pin);
Lee y muestra el valor de un pin digital.



Puertos
--------------------------------------

delay(2000);

pinMode(p0, OUTPUT);
pinMode(p1, OUTPUT);

pinMode(62, OUTPUT);
digitalWrite(62, 1);
pinMode(63, OUTPUT);
digitalWrite(63, 1);
pinMode(64, OUTPUT); 
digitalWrite(64, 1);

INPUTS
------
pinMode(in0, INPUT);
pinMode(in1, INPUT);
pinMode(in2, INPUT);
pinMode(in3, INPUT);
pinMode(in4, INPUT);
pinMode(in5, INPUT);
pinMode(in6, INPUT);
pinMode(in7, INPUT);
pinMode(in8, INPUT);
pinMode(in9, INPUT);
pinMode(in10, INPUT);
pinMode(in11, INPUT);
pinMode(in12, INPUT);
pinMode(in13, INPUT);
pinMode(in14, INPUT);
pinMode(in15, INPUT);
pinMode(in16, INPUT);
pinMode(in17, INPUT);
pinMode(in18, INPUT);
pinMode(in19, INPUT);
pinMode(in20, INPUT);
pinMode(in21, INPUT);
pinMode(in22, INPUT);
pinMode(in23, INPUT);
pinMode(i0, INPUT);
pinMode(i1, INPUT);
pinMode(v0, INPUT);
pinMode(v1, INPUT);
pinMode(v2, INPUT);
pinMode(v3, INPUT);

DIP's INPUTS
------------
pinMode(dip0, INPUT);
pinMode(dip1, INPUT);
pinMode(dip2, INPUT);
pinMode(dip3, INPUT);

IGBT'S OUTPUTS
----------------
pinMode(q0, OUTPUT);
pinMode(q1, OUTPUT);
pinMode(q2, OUTPUT);
pinMode(q3, OUTPUT);
pinMode(q4, OUTPUT);
pinMode(q5, OUTPUT);
pinMode(q6, OUTPUT);
pinMode(q7, OUTPUT);

RELAY OUTPUTS
--------------
pinMode(r0, OUTPUT);
pinMode(r1, OUTPUT);
pinMode(r2, OUTPUT);
pinMode(r3, OUTPUT);
pinMode(r4, OUTPUT);
pinMode(r5, OUTPUT);
pinMode(r6, OUTPUT);
pinMode(r7, OUTPUT);



Funciones relacionadas con Analog I/O
--------------------------------------

leerA(int pin);
Lee el valor de una entrada analógica(Debe seleccionar un pin).
Retorna: El valor leído de la entrada analógica.

referenciaA(int type);
Establece la referencia de voltaje para las conversiones analógicas.
Parámetros:
  - type: El tipo de referencia (DEFAULT, INTERNAL, INTERNAL1V1, INTERNAL2V56, EXTERNAL).
  
pwm(int pin, int valor);
Escribe un valor analógico (0-255) en un pin de salida analógica (PWM).
Parámetros:
  - pin: El número del pin de salida analógica.
  - valor: El valor analógico a escribir (0-255).

initSerial();
Inicializa la comunicación serial para la comunicación con el puerto serial.
Nota: Esta función debe ser llamada en la función setup() para habilitar la comunicación serial.

pintar();

Escribe un mensaje en el SerialMonitor
Nota: Para poder utilizarlo debe inicializar initSerial. Ademas debe estar entre comillas("") 
el mensaje que se quiera pintar:  

pintar("Hola Mundo");

pintarLn(char frase);
Muestra un mensaje en el SerialMonitor al igual que pintar() con la diferencia que este
salta una linea luego de la última palabra


Funciones relacionadas con el tiempo
-------------------------------------

retraso(unsigned long milisegundos);
Genera un retraso en milisegundos.
Parámetros:
  - milisegundos: La duración del retraso en milisegundos.

retrasoSe(int seconds);
Genera un retraso en segundos.
Parámetros:
  - seconds: La duración del retraso en segundos.

retrasoMili(unsigned long valor);
Genera un retraso en microsegundos.
Parámetros:
  - valor: La duración del retraso en microsegundos.

microSegundos();
Retorna el número de microsegundos desde que comenzó la ejecución del programa.
Retorna: El número de microsegundos transcurridos.

miliSegundos();
Retorna el número de milisegundos desde que comenzó la ejecución del programa.
Retorna: El número de milisegundos transcurridos.


Funciones matemáticas
----------------------

absoluto(int num);
Calcula el valor absoluto de un número entero.
Parámetros:
  - num: El número entero para el cual se calculará el valor absoluto.
Retorna: El valor absoluto de num.

contraer(int num, int num2, int num3);
Limita un valor dentro de un rango dado.
Parámetros:
  - num: El valor que se desea limitar.
  - num2: El límite inferior del rango.
  - num3: El límite superior del rango.
Retorna: El valor de "num" limitado dentro del rango [num2, num3].

mapear(int value, int desbeAbajo, int desdeArriba, int paraAbajo, int paraArriba);
Mapea un valor desde un rango a otro.
Parámetros:
  - value: El valor que se desea mapear.
  - desbeAbajo: El valor mínimo del rango original.
  - desdeArriba: El valor máximo del rango original.
  - paraAbajo: El valor mínimo del nuevo rango.
  - paraArriba: El valor máximo del nuevo rango.
Retorna: El valor "value" mapeado al nuevo rango.

maximo(float a, float b);
Obtiene el máximo valor entre dos números flotantes.
Parámetros:
  - a: El primer número.
  - b: El segundo número.
Retorna: El mayor valor entre "a" y "b".

minimo(float a, float b);
Obtiene el mínimo valor entre dos números flotantes.
Parámetros:
  - a: El primer número.
  - b: El segundo número.
Retorna: El menor valor entre "a" y "b".

potencia(float a, float b);
Calcula la potencia de "a" elevado a la potencia "b".
Parámetros:
  - a: La base.
  - b: El exponente.
Retorna: "a" elevado a la potencia "b".

cuadrado(float a);
Calcula el cuadrado de un número flotante.
Parámetros:
  - a: El número para el cual se calculará el cuadrado.
Retorna: El cuadrado de "a".

raiz(float a);
Calcula la raíz cuadrada de un número flotante.
Parámetros:
  - a: El número para el cual se calculará la raíz cuadrada.
Retorna: La raíz cuadrada de "a".

Funciones relacionadas con números aleatorios
---------------------------------------------

iniciarAleatorio(unsigned long semilla);
Inicializa la generación de números aleatorios con una semilla específica.
Parámetros:
  - semilla: El valor de semilla para la generación aleatoria.

Nota: Esta función debe ser llamada en la función setup() para habilitar la funcion aleatorio.

aleatorio(int a, int b);
Genera un número aleatorio entre "a" y "b" (incluyendo "a" pero no "b").
Parámetros:
  - a: El límite inferior del rango de generación.
  - b: El límite superior del rango de generación.
Retorna: Un número aleatorio entre "a" y "b".

Funciones relacionadas con bits y bytes
----------------------------------------

bitLimpiar(int x, int n);

Limpia el n-ésimo bit en un número entero.
Parámetros:
  - x: El número en el que se limpiará el bit.
  - n: La posición del bit a limpiar (0-7).
Retorna: El número con el bit n-ésimo limpiado.

bitL(int x, int n);
Lee el n-ésimo bit en un número entero.
Parámetros:
  - x: El número del que se leerá el bit.
  - n: La posición del bit a leer (0-7).
Retorna: El valor del bit n-ésimo.

bitC(int x, int n);
Coloca el n-ésimo bit en un número entero.
Parámetros:
  - x: El número en el que se colocará el bit.
  - n: La posición del bit a colocar (0-7).
Retorna: El número con el bit n-ésimo colocado.

bitE(int x, int n, int y);
Escribe un valor en el n-ésimo bit de un número entero.
Parámetros:
  - x: El número en el que se escribirá el bit.
  - n: La posición del bit a escribir (0-7).
  - y: El valor a escribir en el bit (0 o 1).
Retorna: El número con el bit n-ésimo modificado.

altoByte(byte x);
Obtiene el byte alto de un valor de 16 bits.
Parámetros:
  - x: El valor de 16 bits del que se obtendrá el byte alto.
Retorna: El byte alto del valor.

bajoByte(byte x);
Obtiene el byte bajo de un valor de 16 bits.
Parámetros:
  - x: El valor de 16 bits del que se obtendrá el byte bajo.
Retorna: El byte bajo del valor.

Funciones trigonométricas
-------------------------

coseno(float a);
Calcula el coseno de un ángulo en radianes.
Parámetros:
  - a: El ángulo en radianes.
Retorna: El valor del coseno del ángulo.

seno(float a);
Calcula el seno de un ángulo en radianes.
Parámetros:
  - a: El ángulo en radianes.
Retorna: El valor del seno del ángulo.

tangente(float a);
Calcula la tangente de un ángulo en radianes.
Parámetros:
  - a: El ángulo en radianes.
Retorna: El valor de la tangente del ángulo.

Funciones relacionadas con caracteres
-------------------------------------

esAlpha(char dato);
Verifica si un carácter es una letra alfabética.

esAlphaNum(char valor);
Verifica si un carácter es alfanumérico.

esAscii(char valor);
Verifica si un carácter es un carácter ASCII.

esControl(char valor);
Verifica si un carácter es un carácter de control.

esDigito(float valor);
Verifica si un valor es un dígito.

esGraphic(char valor);
Verifica si un carácter es un carácter gráfico.

esHexDigit(char valor);
Verifica si un carácter es un dígito hexadecimal.

esMinuscula(char valor);
Verifica si un carácter es una letra minúscula.

esPintable(char valor);
Verifica si un carácter es imprimible.

esPuntuacion(char valor);
Verifica si un carácter es un signo de puntuación.

esEspacio(char valor);
Verifica si un carácter es un espacio.

esMayuscula(char valor);
Verifica si un carácter es una letra mayúscula.

esEspacioBlanco(char valor);
Verifica si un carácter es un espacio en blanco.


Funciones relacionadas con interrupciones
----------------------------------------

interrumpir();
Habilita las interrupciones. Las interrupciones son habilitadas por defecto al inicio del programa.

noInterrumpir();
Deshabilita las interrupciones. Esto evita que las interrupciones interrumpan la ejecución del programa.









